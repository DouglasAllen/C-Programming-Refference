<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="cutter-Assertions">
<refmeta>
<refentrytitle role="top_of_page" id="cutter-Assertions.top_of_page">検証</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>Cutterライブラリ</refmiscinfo>
</refmeta>
<refnamediv>
<refname>検証</refname>
<refpurpose>あなたのプログラムが期待通りに動作しているかを検証します。</refpurpose>
</refnamediv>

<refsynopsisdiv id="cutter-Assertions.synopsis" role="synopsis">
<title role="synopsis.title">概要</title>

<synopsis><link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert">cut_assert</link>                          (<parameter><link linkend="cut-boolean"><type>cut_boolean</type></link> expression</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-true">cut_assert_true</link>                     (<parameter><link linkend="cut-boolean"><type>cut_boolean</type></link> expression</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-false">cut_assert_false</link>                    (<parameter><link linkend="cut-boolean"><type>cut_boolean</type></link> expression</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-equal-boolean">cut_assert_equal_boolean</link>            (<parameter><link linkend="cut-boolean"><type>cut_boolean</type></link> expected</parameter>,
                                                         <parameter><link linkend="cut-boolean"><type>cut_boolean</type></link> actual</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-not-equal-boolean">cut_assert_not_equal_boolean</link>        (<parameter><link linkend="cut-boolean"><type>cut_boolean</type></link> expected</parameter>,
                                                         <parameter><link linkend="cut-boolean"><type>cut_boolean</type></link> actual</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-null">cut_assert_null</link>                     (<parameter>const <link linkend="void"><type>void</type></link> *expression</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-null-string">cut_assert_null_string</link>              (<parameter>const <link linkend="char"><type>char</type></link> *string</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-not-null">cut_assert_not_null</link>                 (<parameter>const <link linkend="void"><type>void</type></link> *expression</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-equal-int">cut_assert_equal_int</link>                (<parameter><link linkend="int"><type>int</type></link> expected</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> actual</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-not-equal-int">cut_assert_not_equal_int</link>            (<parameter><link linkend="int"><type>int</type></link> expected</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> actual</parameter>,
                                                         <parameter>...</parameter>);
#define             <link linkend="cut-assert-equal-int-least8">cut_assert_equal_int_least8</link>         (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-not-equal-int-least8">cut_assert_not_equal_int_least8</link>     (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-equal-int-least16">cut_assert_equal_int_least16</link>        (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-not-equal-int-least16">cut_assert_not_equal_int_least16</link>    (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-equal-int-least32">cut_assert_equal_int_least32</link>        (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-not-equal-int-least32">cut_assert_not_equal_int_least32</link>    (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-equal-int-least64">cut_assert_equal_int_least64</link>        (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-not-equal-int-least64">cut_assert_not_equal_int_least64</link>    (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-equal-int-fast8">cut_assert_equal_int_fast8</link>          (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-not-equal-int-fast8">cut_assert_not_equal_int_fast8</link>      (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-equal-int-fast16">cut_assert_equal_int_fast16</link>         (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-not-equal-int-fast16">cut_assert_not_equal_int_fast16</link>     (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-equal-int-fast32">cut_assert_equal_int_fast32</link>         (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-not-equal-int-fast32">cut_assert_not_equal_int_fast32</link>     (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-equal-int-fast64">cut_assert_equal_int_fast64</link>         (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-not-equal-int-fast64">cut_assert_not_equal_int_fast64</link>     (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-equal-intptr">cut_assert_equal_intptr</link>             (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-not-equal-intptr">cut_assert_not_equal_intptr</link>         (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-equal-intmax">cut_assert_equal_intmax</link>             (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-not-equal-intmax">cut_assert_not_equal_intmax</link>         (expected,
                                                         actual,
                                                         ...)
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-equal-uint">cut_assert_equal_uint</link>               (<parameter>unsigned <link linkend="int"><type>int</type></link> expected</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> actual</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-not-equal-uint">cut_assert_not_equal_uint</link>           (<parameter>unsigned <link linkend="int"><type>int</type></link> expected</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> actual</parameter>,
                                                         <parameter>...</parameter>);
#define             <link linkend="cut-assert-equal-uint-least8">cut_assert_equal_uint_least8</link>        (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-not-equal-uint-least8">cut_assert_not_equal_uint_least8</link>    (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-equal-uint-least16">cut_assert_equal_uint_least16</link>       (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-not-equal-uint-least16">cut_assert_not_equal_uint_least16</link>   (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-equal-uint-least32">cut_assert_equal_uint_least32</link>       (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-not-equal-uint-least32">cut_assert_not_equal_uint_least32</link>   (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-equal-uint-least64">cut_assert_equal_uint_least64</link>       (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-not-equal-uint-least64">cut_assert_not_equal_uint_least64</link>   (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-equal-uint-fast8">cut_assert_equal_uint_fast8</link>         (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-not-equal-uint-fast8">cut_assert_not_equal_uint_fast8</link>     (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-equal-uint-fast16">cut_assert_equal_uint_fast16</link>        (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-not-equal-uint-fast16">cut_assert_not_equal_uint_fast16</link>    (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-equal-uint-fast32">cut_assert_equal_uint_fast32</link>        (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-not-equal-uint-fast32">cut_assert_not_equal_uint_fast32</link>    (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-equal-uint-fast64">cut_assert_equal_uint_fast64</link>        (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-not-equal-uint-fast64">cut_assert_not_equal_uint_fast64</link>    (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-equal-uintptr">cut_assert_equal_uintptr</link>            (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-not-equal-uintptr">cut_assert_not_equal_uintptr</link>        (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-equal-uintmax">cut_assert_equal_uintmax</link>            (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-not-equal-uintmax">cut_assert_not_equal_uintmax</link>        (expected,
                                                         actual,
                                                         ...)
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-equal-size">cut_assert_equal_size</link>               (<parameter><link linkend="size-t"><type>size_t</type></link> expected</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> actual</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-not-equal-size">cut_assert_not_equal_size</link>           (<parameter><link linkend="size-t"><type>size_t</type></link> expected</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> actual</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-equal-double">cut_assert_equal_double</link>             (<parameter><link linkend="double"><type>double</type></link> expected</parameter>,
                                                         <parameter><link linkend="double"><type>double</type></link> error</parameter>,
                                                         <parameter><link linkend="double"><type>double</type></link> actual</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-not-equal-double">cut_assert_not_equal_double</link>         (<parameter><link linkend="double"><type>double</type></link> expected</parameter>,
                                                         <parameter><link linkend="double"><type>double</type></link> error</parameter>,
                                                         <parameter><link linkend="double"><type>double</type></link> actual</parameter>,
                                                         <parameter>...</parameter>);
#define             <link linkend="cut-assert-equal-char">cut_assert_equal_char</link>               (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-not-equal-char">cut_assert_not_equal_char</link>           (expected,
                                                         actual,
                                                         ...)
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-equal-string">cut_assert_equal_string</link>             (<parameter>const <link linkend="char"><type>char</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *actual</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-not-equal-string">cut_assert_not_equal_string</link>         (<parameter>const <link linkend="char"><type>char</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *actual</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-equal-string-with-free">cut_assert_equal_string_with_free</link>   (<parameter>const <link linkend="char"><type>char</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *actual</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-equal-string-or-null">cut_assert_equal_string_or_null</link>     (<parameter>const <link linkend="char"><type>char</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *actual</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-equal-substring">cut_assert_equal_substring</link>          (<parameter>const <link linkend="char"><type>char</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *actual</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> length</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-not-equal-substring">cut_assert_not_equal_substring</link>      (<parameter>const <link linkend="char"><type>char</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *actual</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> length</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-equal-memory">cut_assert_equal_memory</link>             (<parameter>const <link linkend="void"><type>void</type></link> *expected</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> expected_size</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *actual</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> actual_size</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-not-equal-memory">cut_assert_not_equal_memory</link>         (<parameter>const <link linkend="void"><type>void</type></link> *expected</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> expected_size</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *actual</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> actual_size</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-equal-string-array">cut_assert_equal_string_array</link>       (<parameter><link linkend="char"><type>char</type></link> **expected</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **actual</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-equal-string-array-with-free">cut_assert_equal_string_array_with_free</link>
                                                        (<parameter><link linkend="char"><type>char</type></link> **expected</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **actual</parameter>,
                                                         <parameter>...</parameter>);
#define             <link linkend="cut-assert-operator">cut_assert_operator</link>                 (lhs,
                                                         operator,
                                                         rhs,
                                                         ...)
#define             <link linkend="cut-assert-operator-int">cut_assert_operator_int</link>             (lhs,
                                                         operator,
                                                         rhs,
                                                         ...)
#define             <link linkend="cut-assert-operator-uint">cut_assert_operator_uint</link>            (lhs,
                                                         operator,
                                                         rhs,
                                                         ...)
#define             <link linkend="cut-assert-operator-size">cut_assert_operator_size</link>            (lhs,
                                                         operator,
                                                         rhs,
                                                         ...)
#define             <link linkend="cut-assert-operator-double">cut_assert_operator_double</link>          (lhs,
                                                         operator,
                                                         rhs,
                                                         ...)
#define             <link linkend="cut-assert-equal">cut_assert_equal</link>                    (function,
                                                         expected,
                                                         actual,
                                                         ...)
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-errno">cut_assert_errno</link>                    (<parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-file-exist">cut_assert_file_exist</link>               (<parameter>const <link linkend="char"><type>char</type></link> *path</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-path-exist">cut_assert_path_exist</link>               (<parameter>const <link linkend="char"><type>char</type></link> *path</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-exist-path">cut_assert_exist_path</link>               (<parameter>const <link linkend="char"><type>char</type></link> *path</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-path-not-exist">cut_assert_path_not_exist</link>           (<parameter>const <link linkend="char"><type>char</type></link> *path</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-not-exist-path">cut_assert_not_exist_path</link>           (<parameter>const <link linkend="char"><type>char</type></link> *path</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-match">cut_assert_match</link>                    (<parameter>const <link linkend="char"><type>char</type></link> *pattern</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *actual</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-match-with-free">cut_assert_match_with_free</link>          (<parameter>const <link linkend="char"><type>char</type></link> *pattern</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *actual</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-equal-pointer">cut_assert_equal_pointer</link>            (<parameter>const <link linkend="void"><type>void</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *actual</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-assert-equal-fixture-data-string">cut_assert_equal_fixture_data_string</link>
                                                        (<parameter>const <link linkend="char"><type>char</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *path</parameter>,
                                                         <parameter>...</parameter>);
#define             <link linkend="cut-assert-equal-sockaddr">cut_assert_equal_sockaddr</link>           (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-equal-file-raw">cut_assert_equal_file_raw</link>           (expected,
                                                         actual,
                                                         ...)
#define             <link linkend="cut-assert-not-equal-file-raw">cut_assert_not_equal_file_raw</link>       (expected,
                                                         actual,
                                                         ...)
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-error">cut_error</link>                           (<parameter>const <link linkend="char"><type>char</type></link> *format</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-error-errno">cut_error_errno</link>                     (<parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-fail">cut_fail</link>                            (<parameter>const <link linkend="char"><type>char</type></link> *format</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-pend">cut_pend</link>                            (<parameter>const <link linkend="char"><type>char</type></link> *format</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-pending">cut_pending</link>                         (<parameter>const <link linkend="char"><type>char</type></link> *format</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-notify">cut_notify</link>                          (<parameter>const <link linkend="char"><type>char</type></link> *format</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-omit">cut_omit</link>                            (<parameter>const <link linkend="char"><type>char</type></link> *format</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cut-return">cut_return</link>                          (<parameter><type>void</type></parameter>);
</synopsis>
</refsynopsisdiv>

<refsect1 id="cutter-Assertions.description" role="desc">
<title role="desc.title">説明</title>
<para>あなたのプログラムが期待通りに動作しているかを検証するために、期待した値が得られていることを検証したい箇所で<link linkend="cut-assert-XXX"><function>cut_assert_XXX()</function></link>を使います。</para>
<para>例: <informalexample><programlisting>
cut_assert_equal_int(3, 1 + 2);
</programlisting></informalexample></para>
</refsect1>
<refsect1 id="cutter-Assertions.details" role="details">
<title role="details.title">詳細</title>
<refsect2 id="cut-assert" role="function">
<title>cut_assert ()</title>
<indexterm zone="cut-assert"><primary>cut_assert</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert                          (<parameter><link linkend="cut-boolean"><type>cut_boolean</type></link> expression</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para><parameter>expression</parameter>が0でも<link linkend="NULL:CAPS"><literal>NULL</literal></link>でもないとパスします。</para>
<para>例: <informalexample><programlisting>
char *string;
string = malloc(16);
cut_assert(string);
</programlisting></informalexample></para>
<para>
<informalexample><programlisting>
MyObject *object;
object = my_object_new();
cut_assert(object, cut_message("my_object_new() should not be failed"));
</programlisting></informalexample>
</para><variablelist role="params">
<varlistentry><term><parameter>expression</parameter> :</term>
<listitem><simpara>チェックする式。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cut-assert-true" role="function" condition="since:0.9">
<title>cut_assert_true ()</title>
<indexterm zone="cut-assert-true" role="0.9"><primary>cut_assert_true</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_true                     (<parameter><link linkend="cut-boolean"><type>cut_boolean</type></link> expression</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para><parameter>expression</parameter>が<link linkend="CUT-TRUE:CAPS"><literal>CUT_TRUE</literal></link>のとき（0でも<link linkend="NULL:CAPS"><literal>NULL</literal></link>でもないとき）パスします。</para><variablelist role="params">
<varlistentry><term><parameter>expression</parameter> :</term>
<listitem><simpara>チェックする式。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">0.9から</para></refsect2>
<refsect2 id="cut-assert-false" role="function" condition="since:0.9">
<title>cut_assert_false ()</title>
<indexterm zone="cut-assert-false" role="0.9"><primary>cut_assert_false</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_false                    (<parameter><link linkend="cut-boolean"><type>cut_boolean</type></link> expression</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para><parameter>expression</parameter>が0または<link linkend="NULL:CAPS"><literal>NULL</literal></link>のときパスします。</para><variablelist role="params">
<varlistentry><term><parameter>expression</parameter> :</term>
<listitem><simpara>チェックする式。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">0.9から</para></refsect2>
<refsect2 id="cut-assert-equal-boolean" role="function" condition="since:1.0.7">
<title>cut_assert_equal_boolean ()</title>
<indexterm zone="cut-assert-equal-boolean" role="1.0.7"><primary>cut_assert_equal_boolean</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_equal_boolean            (<parameter><link linkend="cut-boolean"><type>cut_boolean</type></link> expected</parameter>,
                                                         <parameter><link linkend="cut-boolean"><type>cut_boolean</type></link> actual</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para><parameter>expected</parameter>と<parameter>actual</parameter>が両方とも<link linkend="CUT-TRUE:CAPS"><literal>CUT_TRUE</literal></link>の値か、両方とも<link linkend="CUT-FALSE:CAPS"><literal>CUT_FALSE</literal></link>の値のときパスします。</para>
<para>例: <informalexample><programlisting>
cut_assert_equal_boolean(CUT_TRUE, CUT_TRUE);   -&gt; パス
cut_assert_equal_boolean(CUT_FALSE, CUT_FALSE); -&gt; パス
cut_assert_equal_boolean(CUT_TRUE, CUT_FALSE);  -&gt; 失敗
</programlisting></informalexample></para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する真偽値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の真偽値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.0.7から</para></refsect2>
<refsect2 id="cut-assert-not-equal-boolean" role="function" condition="since:1.0.7">
<title>cut_assert_not_equal_boolean ()</title>
<indexterm zone="cut-assert-not-equal-boolean" role="1.0.7"><primary>cut_assert_not_equal_boolean</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_not_equal_boolean        (<parameter><link linkend="cut-boolean"><type>cut_boolean</type></link> expected</parameter>,
                                                         <parameter><link linkend="cut-boolean"><type>cut_boolean</type></link> actual</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para><parameter>expected</parameter>が<link linkend="CUT-TRUE:CAPS"><literal>CUT_TRUE</literal></link>の値だが<parameter>actual</parameter>は<link linkend="CUT-FALSE:CAPS"><literal>CUT_FALSE</literal></link>の値のとき、または、<parameter>expected</parameter>が<link linkend="CUT-FALSE:CAPS"><literal>CUT_FALSE</literal></link>の値だが<parameter>actual</parameter>は<link linkend="CUT-TRUE:CAPS"><literal>CUT_TRUE</literal></link>の値のときにパスします。</para>
<para>例: <informalexample><programlisting>
cut_assert_not_equal_boolean(CUT_TRUE, CUT_TRUE);   -&gt; 失敗
cut_assert_not_equal_boolean(CUT_FALSE, CUT_FALSE); -&gt; 失敗
cut_assert_not_equal_boolean(CUT_TRUE, CUT_FALSE);  -&gt; パス
</programlisting></informalexample></para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する真偽値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の真偽値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.0.7から</para></refsect2>
<refsect2 id="cut-assert-null" role="function">
<title>cut_assert_null ()</title>
<indexterm zone="cut-assert-null"><primary>cut_assert_null</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_null                     (<parameter>const <link linkend="void"><type>void</type></link> *expression</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para><parameter>expression</parameter>が<link linkend="NULL:CAPS"><literal>NULL</literal></link>のときパスします。</para><variablelist role="params">
<varlistentry><term><parameter>expression</parameter> :</term>
<listitem><simpara>チェックする式。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cut-assert-null-string" role="function" condition="since:0.3">
<title>cut_assert_null_string ()</title>
<indexterm zone="cut-assert-null-string" role="0.3"><primary>cut_assert_null_string</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_null_string              (<parameter>const <link linkend="char"><type>char</type></link> *string</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para><parameter>string</parameter>が<link linkend="NULL:CAPS"><literal>NULL</literal></link>のときパスします。</para><variablelist role="params">
<varlistentry><term><parameter>string</parameter> :</term>
<listitem><simpara>チェックする文字列。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">0.3から</para></refsect2>
<refsect2 id="cut-assert-not-null" role="function">
<title>cut_assert_not_null ()</title>
<indexterm zone="cut-assert-not-null"><primary>cut_assert_not_null</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_not_null                 (<parameter>const <link linkend="void"><type>void</type></link> *expression</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para><parameter>expression</parameter>が<link linkend="NULL:CAPS"><literal>NULL</literal></link>以外のときパスします。</para><variablelist role="params">
<varlistentry><term><parameter>expression</parameter> :</term>
<listitem><simpara>チェックする式。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cut-assert-equal-int" role="function">
<title>cut_assert_equal_int ()</title>
<indexterm zone="cut-assert-equal-int"><primary>cut_assert_equal_int</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_equal_int                (<parameter><link linkend="int"><type>int</type></link> expected</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> actual</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para><parameter>expected</parameter> == <parameter>actual</parameter>が成り立つときパスします。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cut-assert-not-equal-int" role="function" condition="since:1.0.7">
<title>cut_assert_not_equal_int ()</title>
<indexterm zone="cut-assert-not-equal-int" role="1.0.7"><primary>cut_assert_not_equal_int</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_not_equal_int            (<parameter><link linkend="int"><type>int</type></link> expected</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> actual</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para><parameter>expected</parameter> != <parameter>actual</parameter>が成り立つときパスします。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.0.7から</para></refsect2>
<refsect2 id="cut-assert-equal-int-least8" role="macro" condition="since:1.1.0">
<title>cut_assert_equal_int_least8()</title>
<indexterm zone="cut-assert-equal-int-least8" role="1.1.0"><primary>cut_assert_equal_int_least8</primary></indexterm>
<programlisting>#define             cut_assert_equal_int_least8(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> == <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-not-equal-int-least8" role="macro" condition="since:1.1.0">
<title>cut_assert_not_equal_int_least8()</title>
<indexterm zone="cut-assert-not-equal-int-least8" role="1.1.0"><primary>cut_assert_not_equal_int_least8</primary></indexterm>
<programlisting>#define             cut_assert_not_equal_int_least8(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> != <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-equal-int-least16" role="macro" condition="since:1.1.0">
<title>cut_assert_equal_int_least16()</title>
<indexterm zone="cut-assert-equal-int-least16" role="1.1.0"><primary>cut_assert_equal_int_least16</primary></indexterm>
<programlisting>#define             cut_assert_equal_int_least16(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> == <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-not-equal-int-least16" role="macro" condition="since:1.1.0">
<title>cut_assert_not_equal_int_least16()</title>
<indexterm zone="cut-assert-not-equal-int-least16" role="1.1.0"><primary>cut_assert_not_equal_int_least16</primary></indexterm>
<programlisting>#define             cut_assert_not_equal_int_least16(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> != <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-equal-int-least32" role="macro" condition="since:1.1.0">
<title>cut_assert_equal_int_least32()</title>
<indexterm zone="cut-assert-equal-int-least32" role="1.1.0"><primary>cut_assert_equal_int_least32</primary></indexterm>
<programlisting>#define             cut_assert_equal_int_least32(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> == <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-not-equal-int-least32" role="macro" condition="since:1.1.0">
<title>cut_assert_not_equal_int_least32()</title>
<indexterm zone="cut-assert-not-equal-int-least32" role="1.1.0"><primary>cut_assert_not_equal_int_least32</primary></indexterm>
<programlisting>#define             cut_assert_not_equal_int_least32(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> != <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-equal-int-least64" role="macro" condition="since:1.1.0">
<title>cut_assert_equal_int_least64()</title>
<indexterm zone="cut-assert-equal-int-least64" role="1.1.0"><primary>cut_assert_equal_int_least64</primary></indexterm>
<programlisting>#define             cut_assert_equal_int_least64(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> == <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-not-equal-int-least64" role="macro" condition="since:1.1.0">
<title>cut_assert_not_equal_int_least64()</title>
<indexterm zone="cut-assert-not-equal-int-least64" role="1.1.0"><primary>cut_assert_not_equal_int_least64</primary></indexterm>
<programlisting>#define             cut_assert_not_equal_int_least64(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> != <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-equal-int-fast8" role="macro" condition="since:1.1.0">
<title>cut_assert_equal_int_fast8()</title>
<indexterm zone="cut-assert-equal-int-fast8" role="1.1.0"><primary>cut_assert_equal_int_fast8</primary></indexterm>
<programlisting>#define             cut_assert_equal_int_fast8(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> == <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-not-equal-int-fast8" role="macro" condition="since:1.1.0">
<title>cut_assert_not_equal_int_fast8()</title>
<indexterm zone="cut-assert-not-equal-int-fast8" role="1.1.0"><primary>cut_assert_not_equal_int_fast8</primary></indexterm>
<programlisting>#define             cut_assert_not_equal_int_fast8(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> != <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-equal-int-fast16" role="macro" condition="since:1.1.0">
<title>cut_assert_equal_int_fast16()</title>
<indexterm zone="cut-assert-equal-int-fast16" role="1.1.0"><primary>cut_assert_equal_int_fast16</primary></indexterm>
<programlisting>#define             cut_assert_equal_int_fast16(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> == <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-not-equal-int-fast16" role="macro" condition="since:1.1.0">
<title>cut_assert_not_equal_int_fast16()</title>
<indexterm zone="cut-assert-not-equal-int-fast16" role="1.1.0"><primary>cut_assert_not_equal_int_fast16</primary></indexterm>
<programlisting>#define             cut_assert_not_equal_int_fast16(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> != <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-equal-int-fast32" role="macro" condition="since:1.1.0">
<title>cut_assert_equal_int_fast32()</title>
<indexterm zone="cut-assert-equal-int-fast32" role="1.1.0"><primary>cut_assert_equal_int_fast32</primary></indexterm>
<programlisting>#define             cut_assert_equal_int_fast32(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> == <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-not-equal-int-fast32" role="macro" condition="since:1.1.0">
<title>cut_assert_not_equal_int_fast32()</title>
<indexterm zone="cut-assert-not-equal-int-fast32" role="1.1.0"><primary>cut_assert_not_equal_int_fast32</primary></indexterm>
<programlisting>#define             cut_assert_not_equal_int_fast32(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> != <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-equal-int-fast64" role="macro" condition="since:1.1.0">
<title>cut_assert_equal_int_fast64()</title>
<indexterm zone="cut-assert-equal-int-fast64" role="1.1.0"><primary>cut_assert_equal_int_fast64</primary></indexterm>
<programlisting>#define             cut_assert_equal_int_fast64(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> == <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-not-equal-int-fast64" role="macro" condition="since:1.1.0">
<title>cut_assert_not_equal_int_fast64()</title>
<indexterm zone="cut-assert-not-equal-int-fast64" role="1.1.0"><primary>cut_assert_not_equal_int_fast64</primary></indexterm>
<programlisting>#define             cut_assert_not_equal_int_fast64(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> != <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-equal-intptr" role="macro" condition="since:1.1.0">
<title>cut_assert_equal_intptr()</title>
<indexterm zone="cut-assert-equal-intptr" role="1.1.0"><primary>cut_assert_equal_intptr</primary></indexterm>
<programlisting>#define             cut_assert_equal_intptr(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> == <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-not-equal-intptr" role="macro" condition="since:1.1.0">
<title>cut_assert_not_equal_intptr()</title>
<indexterm zone="cut-assert-not-equal-intptr" role="1.1.0"><primary>cut_assert_not_equal_intptr</primary></indexterm>
<programlisting>#define             cut_assert_not_equal_intptr(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> != <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-equal-intmax" role="macro" condition="since:1.1.0">
<title>cut_assert_equal_intmax()</title>
<indexterm zone="cut-assert-equal-intmax" role="1.1.0"><primary>cut_assert_equal_intmax</primary></indexterm>
<programlisting>#define             cut_assert_equal_intmax(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> == <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-not-equal-intmax" role="macro" condition="since:1.1.0">
<title>cut_assert_not_equal_intmax()</title>
<indexterm zone="cut-assert-not-equal-intmax" role="1.1.0"><primary>cut_assert_not_equal_intmax</primary></indexterm>
<programlisting>#define             cut_assert_not_equal_intmax(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> != <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-equal-uint" role="function">
<title>cut_assert_equal_uint ()</title>
<indexterm zone="cut-assert-equal-uint"><primary>cut_assert_equal_uint</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_equal_uint               (<parameter>unsigned <link linkend="int"><type>int</type></link> expected</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> actual</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para><parameter>expected</parameter> == <parameter>actual</parameter>が成り立つときパスします。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する符号無し整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の符号無し符号整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cut-assert-not-equal-uint" role="function" condition="since:1.0.7">
<title>cut_assert_not_equal_uint ()</title>
<indexterm zone="cut-assert-not-equal-uint" role="1.0.7"><primary>cut_assert_not_equal_uint</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_not_equal_uint           (<parameter>unsigned <link linkend="int"><type>int</type></link> expected</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> actual</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para><parameter>expected</parameter> != <parameter>actual</parameter>が成り立つときパスします。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する符号無し整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の符号無し符号整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.0.7から</para></refsect2>
<refsect2 id="cut-assert-equal-uint-least8" role="macro" condition="since:1.1.0">
<title>cut_assert_equal_uint_least8()</title>
<indexterm zone="cut-assert-equal-uint-least8" role="1.1.0"><primary>cut_assert_equal_uint_least8</primary></indexterm>
<programlisting>#define             cut_assert_equal_uint_least8(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> == <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する符号無し整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の符号無し符号整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-not-equal-uint-least8" role="macro" condition="since:1.1.0">
<title>cut_assert_not_equal_uint_least8()</title>
<indexterm zone="cut-assert-not-equal-uint-least8" role="1.1.0"><primary>cut_assert_not_equal_uint_least8</primary></indexterm>
<programlisting>#define             cut_assert_not_equal_uint_least8(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> != <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する符号無し整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の符号無し符号整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-equal-uint-least16" role="macro" condition="since:1.1.0">
<title>cut_assert_equal_uint_least16()</title>
<indexterm zone="cut-assert-equal-uint-least16" role="1.1.0"><primary>cut_assert_equal_uint_least16</primary></indexterm>
<programlisting>#define             cut_assert_equal_uint_least16(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> == <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する符号無し整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の符号無し符号整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-not-equal-uint-least16" role="macro" condition="since:1.1.0">
<title>cut_assert_not_equal_uint_least16()</title>
<indexterm zone="cut-assert-not-equal-uint-least16" role="1.1.0"><primary>cut_assert_not_equal_uint_least16</primary></indexterm>
<programlisting>#define             cut_assert_not_equal_uint_least16(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> != <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する符号無し整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の符号無し符号整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-equal-uint-least32" role="macro" condition="since:1.1.0">
<title>cut_assert_equal_uint_least32()</title>
<indexterm zone="cut-assert-equal-uint-least32" role="1.1.0"><primary>cut_assert_equal_uint_least32</primary></indexterm>
<programlisting>#define             cut_assert_equal_uint_least32(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> == <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する符号無し整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の符号無し符号整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-not-equal-uint-least32" role="macro" condition="since:1.1.0">
<title>cut_assert_not_equal_uint_least32()</title>
<indexterm zone="cut-assert-not-equal-uint-least32" role="1.1.0"><primary>cut_assert_not_equal_uint_least32</primary></indexterm>
<programlisting>#define             cut_assert_not_equal_uint_least32(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> != <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する符号無し整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の符号無し符号整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-equal-uint-least64" role="macro" condition="since:1.1.0">
<title>cut_assert_equal_uint_least64()</title>
<indexterm zone="cut-assert-equal-uint-least64" role="1.1.0"><primary>cut_assert_equal_uint_least64</primary></indexterm>
<programlisting>#define             cut_assert_equal_uint_least64(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> == <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する符号無し整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の符号無し符号整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-not-equal-uint-least64" role="macro" condition="since:1.1.0">
<title>cut_assert_not_equal_uint_least64()</title>
<indexterm zone="cut-assert-not-equal-uint-least64" role="1.1.0"><primary>cut_assert_not_equal_uint_least64</primary></indexterm>
<programlisting>#define             cut_assert_not_equal_uint_least64(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> != <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する符号無し整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の符号無し符号整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-equal-uint-fast8" role="macro" condition="since:1.1.0">
<title>cut_assert_equal_uint_fast8()</title>
<indexterm zone="cut-assert-equal-uint-fast8" role="1.1.0"><primary>cut_assert_equal_uint_fast8</primary></indexterm>
<programlisting>#define             cut_assert_equal_uint_fast8(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> == <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する符号無し整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の符号無し符号整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-not-equal-uint-fast8" role="macro" condition="since:1.1.0">
<title>cut_assert_not_equal_uint_fast8()</title>
<indexterm zone="cut-assert-not-equal-uint-fast8" role="1.1.0"><primary>cut_assert_not_equal_uint_fast8</primary></indexterm>
<programlisting>#define             cut_assert_not_equal_uint_fast8(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> != <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する符号無し整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の符号無し符号整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-equal-uint-fast16" role="macro" condition="since:1.1.0">
<title>cut_assert_equal_uint_fast16()</title>
<indexterm zone="cut-assert-equal-uint-fast16" role="1.1.0"><primary>cut_assert_equal_uint_fast16</primary></indexterm>
<programlisting>#define             cut_assert_equal_uint_fast16(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> == <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する符号無し整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の符号無し符号整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-not-equal-uint-fast16" role="macro" condition="since:1.1.0">
<title>cut_assert_not_equal_uint_fast16()</title>
<indexterm zone="cut-assert-not-equal-uint-fast16" role="1.1.0"><primary>cut_assert_not_equal_uint_fast16</primary></indexterm>
<programlisting>#define             cut_assert_not_equal_uint_fast16(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> != <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する符号無し整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の符号無し符号整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-equal-uint-fast32" role="macro" condition="since:1.1.0">
<title>cut_assert_equal_uint_fast32()</title>
<indexterm zone="cut-assert-equal-uint-fast32" role="1.1.0"><primary>cut_assert_equal_uint_fast32</primary></indexterm>
<programlisting>#define             cut_assert_equal_uint_fast32(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> == <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する符号無し整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の符号無し符号整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-not-equal-uint-fast32" role="macro" condition="since:1.1.0">
<title>cut_assert_not_equal_uint_fast32()</title>
<indexterm zone="cut-assert-not-equal-uint-fast32" role="1.1.0"><primary>cut_assert_not_equal_uint_fast32</primary></indexterm>
<programlisting>#define             cut_assert_not_equal_uint_fast32(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> != <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する符号無し整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の符号無し符号整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-equal-uint-fast64" role="macro" condition="since:1.1.0">
<title>cut_assert_equal_uint_fast64()</title>
<indexterm zone="cut-assert-equal-uint-fast64" role="1.1.0"><primary>cut_assert_equal_uint_fast64</primary></indexterm>
<programlisting>#define             cut_assert_equal_uint_fast64(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> == <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する符号無し整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の符号無し符号整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-not-equal-uint-fast64" role="macro" condition="since:1.1.0">
<title>cut_assert_not_equal_uint_fast64()</title>
<indexterm zone="cut-assert-not-equal-uint-fast64" role="1.1.0"><primary>cut_assert_not_equal_uint_fast64</primary></indexterm>
<programlisting>#define             cut_assert_not_equal_uint_fast64(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> != <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する符号無し整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の符号無し符号整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-equal-uintptr" role="macro" condition="since:1.1.0">
<title>cut_assert_equal_uintptr()</title>
<indexterm zone="cut-assert-equal-uintptr" role="1.1.0"><primary>cut_assert_equal_uintptr</primary></indexterm>
<programlisting>#define             cut_assert_equal_uintptr(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> == <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する符号無し整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の符号無し符号整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-not-equal-uintptr" role="macro" condition="since:1.1.0">
<title>cut_assert_not_equal_uintptr()</title>
<indexterm zone="cut-assert-not-equal-uintptr" role="1.1.0"><primary>cut_assert_not_equal_uintptr</primary></indexterm>
<programlisting>#define             cut_assert_not_equal_uintptr(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> != <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する符号無し整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の符号無し符号整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-equal-uintmax" role="macro" condition="since:1.1.0">
<title>cut_assert_equal_uintmax()</title>
<indexterm zone="cut-assert-equal-uintmax" role="1.1.0"><primary>cut_assert_equal_uintmax</primary></indexterm>
<programlisting>#define             cut_assert_equal_uintmax(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> == <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する符号無し整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の符号無し符号整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-not-equal-uintmax" role="macro" condition="since:1.1.0">
<title>cut_assert_not_equal_uintmax()</title>
<indexterm zone="cut-assert-not-equal-uintmax" role="1.1.0"><primary>cut_assert_not_equal_uintmax</primary></indexterm>
<programlisting>#define             cut_assert_not_equal_uintmax(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> != <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この関数はCUT_SUPPORT_C99_STDINT_TYPESが定義されているときだけ使用できます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する符号無し整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の符号無し符号整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.0から</para></refsect2>
<refsect2 id="cut-assert-equal-size" role="function" condition="since:1.0.6">
<title>cut_assert_equal_size ()</title>
<indexterm zone="cut-assert-equal-size" role="1.0.6"><primary>cut_assert_equal_size</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_equal_size               (<parameter><link linkend="size-t"><type>size_t</type></link> expected</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> actual</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para><parameter>expected</parameter> == <parameter>actual</parameter>が成り立つときパスします。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待するsize_tの値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際のsize_tの値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.0.6から</para></refsect2>
<refsect2 id="cut-assert-not-equal-size" role="function" condition="since:1.0.7">
<title>cut_assert_not_equal_size ()</title>
<indexterm zone="cut-assert-not-equal-size" role="1.0.7"><primary>cut_assert_not_equal_size</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_not_equal_size           (<parameter><link linkend="size-t"><type>size_t</type></link> expected</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> actual</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para><parameter>expected</parameter> != <parameter>actual</parameter>が成り立つときパスします。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待するsize_tの値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際のsize_tの値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.0.7から</para></refsect2>
<refsect2 id="cut-assert-equal-double" role="function">
<title>cut_assert_equal_double ()</title>
<indexterm zone="cut-assert-equal-double"><primary>cut_assert_equal_double</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_equal_double             (<parameter><link linkend="double"><type>double</type></link> expected</parameter>,
                                                         <parameter><link linkend="double"><type>double</type></link> error</parameter>,
                                                         <parameter><link linkend="double"><type>double</type></link> actual</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para>(<parameter>expected</parameter> - <parameter>error</parameter>) &lt;= <parameter>actual</parameter> &lt;= (<parameter>expected</parameter> + <parameter>error</parameter>)が成り立つときパスします。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する浮動小数点数。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter> :</term>
<listitem><simpara>誤差範囲を示す浮動小数点数。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の浮動小数点数。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cut-assert-not-equal-double" role="function" condition="since:1.0.7">
<title>cut_assert_not_equal_double ()</title>
<indexterm zone="cut-assert-not-equal-double" role="1.0.7"><primary>cut_assert_not_equal_double</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_not_equal_double         (<parameter><link linkend="double"><type>double</type></link> expected</parameter>,
                                                         <parameter><link linkend="double"><type>double</type></link> error</parameter>,
                                                         <parameter><link linkend="double"><type>double</type></link> actual</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para><parameter>actual</parameter> &lt; (<parameter>expected</parameter> - <parameter>error</parameter>) &amp;&amp; (<parameter>expected</parameter> + <parameter>error</parameter>) &lt; <parameter>actual</parameter>が成り立つときパスします。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する浮動小数点数。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter> :</term>
<listitem><simpara>誤差範囲を示す浮動小数点数。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の浮動小数点数。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.0.7から</para></refsect2>
<refsect2 id="cut-assert-equal-char" role="macro" condition="since:1.1.3">
<title>cut_assert_equal_char()</title>
<indexterm zone="cut-assert-equal-char" role="1.1.3"><primary>cut_assert_equal_char</primary></indexterm>
<programlisting>#define             cut_assert_equal_char(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> == <parameter>actual</parameter>が成り立つときパスします。</para>
<para>例: <informalexample><programlisting>
cut_assert_equal_char('a', 'a'); -&gt; パス
cut_assert_equal_char('a', 'b'); -&gt; 失敗
</programlisting></informalexample></para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する文字。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の文字。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.3から</para></refsect2>
<refsect2 id="cut-assert-not-equal-char" role="macro" condition="since:1.1.3">
<title>cut_assert_not_equal_char()</title>
<indexterm zone="cut-assert-not-equal-char" role="1.1.3"><primary>cut_assert_not_equal_char</primary></indexterm>
<programlisting>#define             cut_assert_not_equal_char(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> != <parameter>actual</parameter>が成り立つときパスします。</para>
<para>例: <informalexample><programlisting>
cut_assert_not_equal_char('a', 'b'); -&gt; パス
cut_assert_not_equal_char('a', 'a'); -&gt; 失敗
</programlisting></informalexample></para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する文字。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の文字。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.3から</para></refsect2>
<refsect2 id="cut-assert-equal-string" role="function">
<title>cut_assert_equal_string ()</title>
<indexterm zone="cut-assert-equal-string"><primary>cut_assert_equal_string</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_equal_string             (<parameter>const <link linkend="char"><type>char</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *actual</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para><parameter>expected</parameter>と<parameter>actual</parameter>がどちらとも<link linkend="NULL:CAPS"><literal>NULL</literal></link>、あるいはstrcmp(<parameter>expected</parameter>, <parameter>actual</parameter>) == 0が成り立つときにパスします。</para>
<para>例: <informalexample><programlisting>
cut_assert_equal_string("abc", "abc"); -&gt; パス
cut_assert_equal_string(NULL, NULL);   -&gt; パス
cut_assert_equal_string("abc", "ABC"); -&gt; 失敗
cut_assert_equal_string("abc", NULL);  -&gt; 失敗
cut_assert_equal_string(NULL, "abc");  -&gt; 失敗
</programlisting></informalexample></para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する文字列。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の文字列の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cut-assert-not-equal-string" role="function" condition="since:1.0.7">
<title>cut_assert_not_equal_string ()</title>
<indexterm zone="cut-assert-not-equal-string" role="1.0.7"><primary>cut_assert_not_equal_string</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_not_equal_string         (<parameter>const <link linkend="char"><type>char</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *actual</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para><parameter>expected</parameter>か<parameter>actual</parameter>のどちらかが<link linkend="NULL:CAPS"><literal>NULL</literal></link>のとき、または、strcmp(<parameter>expected</parameter>, <parameter>actual</parameter>) != 0のときパスします。</para>
<para>例: <informalexample><programlisting>
cut_assert_not_equal_string("abc", NULL);  -&gt; パス
cut_assert_not_equal_string(NULL, "abc");  -&gt; パス
cut_assert_not_equal_string("abc", "ABC"); -&gt; パス
cut_assert_not_equal_string("abc", "abc"); -&gt; 失敗
cut_assert_not_equal_string(NULL, NULL);   -&gt; 失敗
</programlisting></informalexample></para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する文字列。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の文字列の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.0.7から</para></refsect2>
<refsect2 id="cut-assert-equal-string-with-free" role="function" condition="since:0.3">
<title>cut_assert_equal_string_with_free ()</title>
<indexterm zone="cut-assert-equal-string-with-free" role="0.3"><primary>cut_assert_equal_string_with_free</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_equal_string_with_free   (<parameter>const <link linkend="char"><type>char</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *actual</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para><parameter>expected</parameter>と<parameter>actual</parameter>がどちらとも<link linkend="NULL:CAPS"><literal>NULL</literal></link>、あるいはstrcmp(<parameter>expected</parameter>, <parameter>actual</parameter>) == 0が成り立つときにパスします。</para>
<para>使用例は<link linkend="cut-assert-equal-string"><function>cut_assert_equal_string()</function></link>を見てください。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する文字列。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の文字列の値。（チェック後に開放される）</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">0.3から</para></refsect2>
<refsect2 id="cut-assert-equal-string-or-null" role="function" condition="deprecated:0.3: Use cut_assert_equal_string() instead.">
<title>cut_assert_equal_string_or_null ()</title>
<indexterm zone="cut-assert-equal-string-or-null" role="deprecated"><primary>cut_assert_equal_string_or_null</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_equal_string_or_null     (<parameter>const <link linkend="char"><type>char</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *actual</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<warning><para><literal>cut_assert_equal_string_or_null</literal>はバージョン0.3から非推奨になりました。新しく書くコードでは使わないでください。代わりに<link linkend="cut-assert-equal-string"><function>cut_assert_equal_string()</function></link>を使ってください。</para></warning>
<variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する文字列。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の文字列の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cut-assert-equal-substring" role="function" condition="since:1.0.7">
<title>cut_assert_equal_substring ()</title>
<indexterm zone="cut-assert-equal-substring" role="1.0.7"><primary>cut_assert_equal_substring</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_equal_substring          (<parameter>const <link linkend="char"><type>char</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *actual</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> length</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para>(1)<parameter>expected</parameter>と<parameter>actual</parameter>が両方とも<link linkend="NULL:CAPS"><literal>NULL</literal></link>で<parameter>length</parameter> == 1が成り立つとき、または、(2) strncmp(<parameter>expected</parameter>, <parameter>actual</parameter>, <parameter>length</parameter>) == 0が成り立つときパスします。</para>
<para>例: <informalexample><programlisting>
cut_assert_equal_substring("abcdef", "abcDEF", 3); -&gt; パス
cut_assert_equal_substring(NULL, NULL, 0);         -&gt; パス
cut_assert_equal_substring(NULL, NULL, 3);         -&gt; 失敗
cut_assert_equal_substring("abc", "ABC", 3);       -&gt; 失敗
cut_assert_equal_substring("abc", NULL, 3);        -&gt; 失敗
cut_assert_equal_substring(NULL, "abc", 3);        -&gt; 失敗
</programlisting></informalexample></para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する文字列。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の文字列の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter> :</term>
<listitem><simpara>compared string length.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.0.7から</para></refsect2>
<refsect2 id="cut-assert-not-equal-substring" role="function" condition="since:1.0.7">
<title>cut_assert_not_equal_substring ()</title>
<indexterm zone="cut-assert-not-equal-substring" role="1.0.7"><primary>cut_assert_not_equal_substring</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_not_equal_substring      (<parameter>const <link linkend="char"><type>char</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *actual</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> length</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para>(1) <parameter>expected</parameter>と<parameter>actual</parameter>のどちらかが<link linkend="NULL:CAPS"><literal>NULL</literal></link>、または、(2) strncmp(<parameter>expected</parameter>, <parameter>actual</parameter>, <parameter>length</parameter>) != 0が成り立つときパスします。</para>
<para>例: <informalexample><programlisting>
cut_assert_not_equal_substring("abc", "ABC", 3);       -&gt; パス
cut_assert_not_equal_substring("abc", NULL, 3);        -&gt; パス
cut_assert_not_equal_substring(NULL, "abc", 3);        -&gt; パス
cut_assert_not_equal_substring("abcdef", "abcDEF", 3); -&gt; 失敗
cut_assert_not_equal_substring(NULL, NULL, 0);         -&gt; 失敗
cut_assert_not_equal_substring(NULL, NULL, 3);         -&gt; 失敗
</programlisting></informalexample></para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する文字列。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の文字列の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter> :</term>
<listitem><simpara>compared string length.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.0.7から</para></refsect2>
<refsect2 id="cut-assert-equal-memory" role="function">
<title>cut_assert_equal_memory ()</title>
<indexterm zone="cut-assert-equal-memory"><primary>cut_assert_equal_memory</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_equal_memory             (<parameter>const <link linkend="void"><type>void</type></link> *expected</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> expected_size</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *actual</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> actual_size</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para><parameter>expected_size</parameter> == <parameter>actual_size</parameter>が成り立ち、かつ、memcmp(<parameter>expected</parameter>, <parameter>actual</parameter>, <parameter>expected_size</parameter>) == 0が成り立つときにパスします。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待するデータ。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expected_size</parameter> :</term>
<listitem><simpara><parameter>expected</parameter>のサイズ。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際のデータ。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual_size</parameter> :</term>
<listitem><simpara><parameter>actual</parameter>のサイズ。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cut-assert-not-equal-memory" role="function" condition="since:1.0.7">
<title>cut_assert_not_equal_memory ()</title>
<indexterm zone="cut-assert-not-equal-memory" role="1.0.7"><primary>cut_assert_not_equal_memory</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_not_equal_memory         (<parameter>const <link linkend="void"><type>void</type></link> *expected</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> expected_size</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *actual</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> actual_size</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para><parameter>expected_size</parameter> != <parameter>actual_size</parameter>またはmemcmp(<parameter>expected</parameter>, <parameter>actual</parameter>, <parameter>expected_size</parameter>) != 0が成り立つときパスします。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待するデータ。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expected_size</parameter> :</term>
<listitem><simpara><parameter>expected</parameter>のサイズ。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際のデータ。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual_size</parameter> :</term>
<listitem><simpara><parameter>actual</parameter>のサイズ。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.0.7から</para></refsect2>
<refsect2 id="cut-assert-equal-string-array" role="function">
<title>cut_assert_equal_string_array ()</title>
<indexterm zone="cut-assert-equal-string-array"><primary>cut_assert_equal_string_array</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_equal_string_array       (<parameter><link linkend="char"><type>char</type></link> **expected</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **actual</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para><parameter>expected</parameter>と<parameter>actual</parameter>がどちらとも<link linkend="NULL:CAPS"><literal>NULL</literal></link>ではなく、どちらも同じ内容の文字列(<link linkend="strcmp"><function>strcmp()</function></link> == 0)を持つときにパスします。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する文字列の配列。配列は<link linkend="NULL:CAPS"><literal>NULL</literal></link>終端。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の文字列の配列。配列は<link linkend="NULL:CAPS"><literal>NULL</literal></link>終端。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cut-assert-equal-string-array-with-free" role="function" condition="since:0.9">
<title>cut_assert_equal_string_array_with_free ()</title>
<indexterm zone="cut-assert-equal-string-array-with-free" role="0.9"><primary>cut_assert_equal_string_array_with_free</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_equal_string_array_with_free
                                                        (<parameter><link linkend="char"><type>char</type></link> **expected</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **actual</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para><parameter>expected</parameter>と<parameter>actual</parameter>がどちらとも<link linkend="NULL:CAPS"><literal>NULL</literal></link>ではなく、どちらも同じ内容の文字列(<link linkend="strcmp"><function>strcmp()</function></link> == 0)を持つときにパスします。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する文字列の配列。配列は<link linkend="NULL:CAPS"><literal>NULL</literal></link>終端。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際の文字列の配列。配列は<link linkend="NULL:CAPS"><literal>NULL</literal></link>終端。（チェック後に開放される）</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">0.9から</para></refsect2>
<refsect2 id="cut-assert-operator" role="macro">
<title>cut_assert_operator()</title>
<indexterm zone="cut-assert-operator"><primary>cut_assert_operator</primary></indexterm>
<programlisting>#define             cut_assert_operator(lhs, operator, rhs, ...)</programlisting>
<para>(<parameter>lhs</parameter> <parameter>operator</parameter> <parameter>rhs</parameter>)が真のときにパスします。</para>
<para>例: <informalexample><programlisting>
cut_assert_operator(1, &lt;, 2) -&gt; (1 &lt; 2);
</programlisting></informalexample></para><variablelist role="params">
<varlistentry><term><parameter>lhs</parameter> :</term>
<listitem><simpara>左辺値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>operator</parameter> :</term>
<listitem><simpara>二項演算子。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rhs</parameter> :</term>
<listitem><simpara>右辺値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cut-assert-operator-int" role="macro">
<title>cut_assert_operator_int()</title>
<indexterm zone="cut-assert-operator-int"><primary>cut_assert_operator_int</primary></indexterm>
<programlisting>#define             cut_assert_operator_int(lhs, operator, rhs, ...)</programlisting>
<para>(<parameter>lhs</parameter> <parameter>operator</parameter> <parameter>rhs</parameter>)が真のときにパスします。</para>
<para>例: <informalexample><programlisting>
cut_assert_operator_int(1, &lt;, 2) -&gt; (1 &lt; 2);
</programlisting></informalexample></para><variablelist role="params">
<varlistentry><term><parameter>lhs</parameter> :</term>
<listitem><simpara>左辺の整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>operator</parameter> :</term>
<listitem><simpara>二項演算子。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rhs</parameter> :</term>
<listitem><simpara>右辺の整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cut-assert-operator-uint" role="macro" condition="since:1.0.5">
<title>cut_assert_operator_uint()</title>
<indexterm zone="cut-assert-operator-uint" role="1.0.5"><primary>cut_assert_operator_uint</primary></indexterm>
<programlisting>#define             cut_assert_operator_uint(lhs, operator, rhs, ...)</programlisting>
<para>(<parameter>lhs</parameter> <parameter>operator</parameter> <parameter>rhs</parameter>)が真のときにパスします。</para>
<para>例: <informalexample><programlisting>
cut_assert_operator_uint(1, &lt;, 2) -&gt; (1 &lt; 2);
</programlisting></informalexample></para><variablelist role="params">
<varlistentry><term><parameter>lhs</parameter> :</term>
<listitem><simpara>左辺の符号無し整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>operator</parameter> :</term>
<listitem><simpara>二項演算子。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rhs</parameter> :</term>
<listitem><simpara>右辺の符号無し整数の値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.0.5から</para></refsect2>
<refsect2 id="cut-assert-operator-size" role="macro" condition="since:1.0.5">
<title>cut_assert_operator_size()</title>
<indexterm zone="cut-assert-operator-size" role="1.0.5"><primary>cut_assert_operator_size</primary></indexterm>
<programlisting>#define             cut_assert_operator_size(lhs, operator, rhs, ...)</programlisting>
<para>(<parameter>lhs</parameter> <parameter>operator</parameter> <parameter>rhs</parameter>)が真のときにパスします。</para>
<para>例: <informalexample><programlisting>
cut_assert_operator_size(1, &lt;, 2) -&gt; (1 &lt; 2);
</programlisting></informalexample></para><variablelist role="params">
<varlistentry><term><parameter>lhs</parameter> :</term>
<listitem><simpara>左辺のsize_tの値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>operator</parameter> :</term>
<listitem><simpara>二項演算子。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rhs</parameter> :</term>
<listitem><simpara>右辺のsize_tの値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.0.5から</para></refsect2>
<refsect2 id="cut-assert-operator-double" role="macro" condition="since:1.0.5">
<title>cut_assert_operator_double()</title>
<indexterm zone="cut-assert-operator-double" role="1.0.5"><primary>cut_assert_operator_double</primary></indexterm>
<programlisting>#define             cut_assert_operator_double(lhs, operator, rhs, ...)</programlisting>
<para>(<parameter>lhs</parameter> <parameter>operator</parameter> <parameter>rhs</parameter>)が真のときにパスします。</para>
<para>例: <informalexample><programlisting>
cut_assert_operator_double(1.1, &lt;, 2.2) -&gt; (1.1 &lt; 2.2);
</programlisting></informalexample></para><variablelist role="params">
<varlistentry><term><parameter>lhs</parameter> :</term>
<listitem><simpara>左辺の浮動小数点値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>operator</parameter> :</term>
<listitem><simpara>二項演算子。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rhs</parameter> :</term>
<listitem><simpara>右辺の浮動小数点値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.0.5から</para></refsect2>
<refsect2 id="cut-assert-equal" role="macro">
<title>cut_assert_equal()</title>
<indexterm zone="cut-assert-equal"><primary>cut_assert_equal</primary></indexterm>
<programlisting>#define             cut_assert_equal(function, expected, actual, ...)</programlisting>
<para><parameter>function</parameter>(<parameter>expected</parameter>, <parameter>actual</parameter>)が<link linkend="CUT-TRUE:CAPS"><literal>CUT_TRUE</literal></link>を返すときパスします。</para>
<para>例: <informalexample><programlisting>
cut_assert_equal(!strcmp, "abc", "abc"); -&gt; パス
</programlisting></informalexample></para><variablelist role="params">
<varlistentry><term><parameter>function</parameter> :</term>
<listitem><simpara><parameter>actual</parameter>と<parameter>expected</parameter>を比較する関数。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実測値。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cut-assert-errno" role="function" condition="since:0.8">
<title>cut_assert_errno ()</title>
<indexterm zone="cut-assert-errno" role="0.8"><primary>cut_assert_errno</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_errno                    (<parameter>...</parameter>);</programlisting>
<para>errnoが0だとパスします。</para>
<para>例: <informalexample><programlisting>
count = write(stdout, buffer, strlen(buffer));
cut_assert_errno("Failed to write");            -&gt; count != -1のときパス
</programlisting></informalexample></para><variablelist role="params">
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">0.8から</para></refsect2>
<refsect2 id="cut-assert-file-exist" role="function" condition="deprecated:1.0.2: Use cut_assert_path_exist() instead.|since:0.9">
<title>cut_assert_file_exist ()</title>
<indexterm zone="cut-assert-file-exist" role="deprecated"><primary>cut_assert_file_exist</primary></indexterm><indexterm zone="cut-assert-file-exist" role="0.9"><primary>cut_assert_file_exist</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_file_exist               (<parameter>const <link linkend="char"><type>char</type></link> *path</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<warning><para><literal>cut_assert_file_exist</literal>はバージョン1.0.2から非推奨になりました。新しく書くコードでは使わないでください。代わりに<link linkend="cut-assert-path-exist"><function>cut_assert_path_exist()</function></link>を使ってください。</para></warning>
<para><parameter>path</parameter>が存在するときにパスします。普通のファイルかもしれませんし、そうでないかもしれません。（例えばシンボリックリンクやディレクトリなど）</para>
<para>例: <informalexample><programlisting>
cut_assert_file_exist("/tmp");             -&gt; 多くの環境ではパス
cut_assert_file_exist("/non-existent");    -&gt; 失敗
</programlisting></informalexample></para><variablelist role="params">
<varlistentry><term><parameter>path</parameter> :</term>
<listitem><simpara>テストするパス。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">0.9から</para></refsect2>
<refsect2 id="cut-assert-path-exist" role="function" condition="deprecated:1.1.5: Use cut_assert_exist_path() instead.|since:1.0.2">
<title>cut_assert_path_exist ()</title>
<indexterm zone="cut-assert-path-exist" role="deprecated"><primary>cut_assert_path_exist</primary></indexterm><indexterm zone="cut-assert-path-exist" role="1.0.2"><primary>cut_assert_path_exist</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_path_exist               (<parameter>const <link linkend="char"><type>char</type></link> *path</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<warning><para><literal>cut_assert_path_exist</literal>はバージョン1.1.5から非推奨になりました。新しく書くコードでは使わないでください。代わりに<link linkend="cut-assert-exist-path"><function>cut_assert_exist_path()</function></link>を使ってください。</para></warning>
<para><parameter>path</parameter>が存在するときにパスします。普通のファイルかもしれませんし、そうでないかもしれません。（例えばシンボリックリンクやディレクトリなど）</para>
<para>例: <informalexample><programlisting>
cut_assert_path_exist("/tmp");             -&gt; 多くの環境ではパス
cut_assert_path_exist("/non-existent");    -&gt; 失敗
</programlisting></informalexample></para><variablelist role="params">
<varlistentry><term><parameter>path</parameter> :</term>
<listitem><simpara>テストするパス。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.0.2から</para></refsect2>
<refsect2 id="cut-assert-exist-path" role="function" condition="since:1.1.5">
<title>cut_assert_exist_path ()</title>
<indexterm zone="cut-assert-exist-path" role="1.1.5"><primary>cut_assert_exist_path</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_exist_path               (<parameter>const <link linkend="char"><type>char</type></link> *path</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para><parameter>path</parameter>が存在するときにパスします。普通のファイルかもしれませんし、そうでないかもしれません。（例えばシンボリックリンクやディレクトリなど）</para>
<para>例: <informalexample><programlisting>
cut_assert_exist_path("/tmp");             -&gt; 多くの環境ではパス
cut_assert_exist_path("/non-existent");    -&gt; 失敗
</programlisting></informalexample></para><variablelist role="params">
<varlistentry><term><parameter>path</parameter> :</term>
<listitem><simpara>テストするパス。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.5から</para></refsect2>
<refsect2 id="cut-assert-path-not-exist" role="function" condition="deprecated:1.1.5: Use cut_assert_not_exist_path() instead.|since:1.0.2">
<title>cut_assert_path_not_exist ()</title>
<indexterm zone="cut-assert-path-not-exist" role="deprecated"><primary>cut_assert_path_not_exist</primary></indexterm><indexterm zone="cut-assert-path-not-exist" role="1.0.2"><primary>cut_assert_path_not_exist</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_path_not_exist           (<parameter>const <link linkend="char"><type>char</type></link> *path</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<warning><para><literal>cut_assert_path_not_exist</literal>はバージョン1.1.5から非推奨になりました。新しく書くコードでは使わないでください。代わりに<link linkend="cut-assert-not-exist-path"><function>cut_assert_not_exist_path()</function></link>を使ってください。</para></warning>
<para><parameter>path</parameter>が存在しないとパスします。</para>
<para>例: <informalexample><programlisting>
cut_assert_path_not_exist("/non-existent");    -&gt; 多くの環境ではパス
cut_assert_path_not_exist("/tmp");             -&gt; 失敗
</programlisting></informalexample></para><variablelist role="params">
<varlistentry><term><parameter>path</parameter> :</term>
<listitem><simpara>テストするパス。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.0.2から</para></refsect2>
<refsect2 id="cut-assert-not-exist-path" role="function" condition="since:1.1.5">
<title>cut_assert_not_exist_path ()</title>
<indexterm zone="cut-assert-not-exist-path" role="1.1.5"><primary>cut_assert_not_exist_path</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_not_exist_path           (<parameter>const <link linkend="char"><type>char</type></link> *path</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para><parameter>path</parameter>が存在しないとパスします。</para>
<para>例: <informalexample><programlisting>
cut_assert_not_exist_path("/non-existent");    -&gt; 多くの環境ではパス
cut_assert_not_exist_path("/tmp");             -&gt; 失敗
</programlisting></informalexample></para><variablelist role="params">
<varlistentry><term><parameter>path</parameter> :</term>
<listitem><simpara>テストするパス。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.5から</para></refsect2>
<refsect2 id="cut-assert-match" role="function" condition="since:1.0">
<title>cut_assert_match ()</title>
<indexterm zone="cut-assert-match" role="1.0"><primary>cut_assert_match</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_match                    (<parameter>const <link linkend="char"><type>char</type></link> *pattern</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *actual</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para><parameter>pattern</parameter>が<parameter>string</parameter>にマッチしたときパスします。</para>
<para>例: <informalexample><programlisting>
cut_assert_match("^abc", "abc");            -&gt; パス
cut_assert_match("^abc", " abc");           -&gt; 失敗
</programlisting></informalexample></para><variablelist role="params">
<varlistentry><term><parameter>pattern</parameter> :</term>
<listitem><simpara>正規表現。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>マッチされる文字列。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.0から</para></refsect2>
<refsect2 id="cut-assert-match-with-free" role="function" condition="since:1.0">
<title>cut_assert_match_with_free ()</title>
<indexterm zone="cut-assert-match-with-free" role="1.0"><primary>cut_assert_match_with_free</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_match_with_free          (<parameter>const <link linkend="char"><type>char</type></link> *pattern</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *actual</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para><parameter>pattern</parameter>が<parameter>string</parameter>にマッチしたときパスします。詳細は</para><variablelist role="params">
<varlistentry><term><parameter>pattern</parameter> :</term>
<listitem><simpara>正規表現。（文字列で指定）</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>マッチされる文字列。（チェック後に開放される）</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.0から</para></refsect2>
<refsect2 id="cut-assert-equal-pointer" role="function" condition="since:1.0">
<title>cut_assert_equal_pointer ()</title>
<indexterm zone="cut-assert-equal-pointer" role="1.0"><primary>cut_assert_equal_pointer</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_equal_pointer            (<parameter>const <link linkend="void"><type>void</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *actual</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para><parameter>expected</parameter> == <parameter>actual</parameter>が成り立つときパスします。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待するポインタ。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際のポインタ。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.0から</para></refsect2>
<refsect2 id="cut-assert-equal-fixture-data-string" role="function" condition="since:1.0.2">
<title>cut_assert_equal_fixture_data_string ()</title>
<indexterm zone="cut-assert-equal-fixture-data-string" role="1.0.2"><primary>cut_assert_equal_fixture_data_string</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_assert_equal_fixture_data_string
                                                        (<parameter>const <link linkend="char"><type>char</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *path</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para><parameter>expected</parameter> == cut_get_fixture_data_string(<parameter>path</parameter>, ...)が成り立つときパスします。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待する文字列。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter> :</term>
<listitem><simpara>フィクスチャデータのパスの最初の要素。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>パスの残りの要素。<link linkend="NULL:CAPS"><literal>NULL</literal></link>終端。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.0.2から</para></refsect2>
<refsect2 id="cut-assert-equal-sockaddr" role="macro" condition="since:1.1.1">
<title>cut_assert_equal_sockaddr()</title>
<indexterm zone="cut-assert-equal-sockaddr" role="1.1.1"><primary>cut_assert_equal_sockaddr</primary></indexterm>
<programlisting>#define             cut_assert_equal_sockaddr(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter> == <parameter>actual</parameter>が成り立つときパスします。</para>
<para>この検証はCUT_DISABLE_SOCKET_SUPPORTを定義すると無効にできます。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>期待するソケットアドレス。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>実際のソケットアドレス。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.1から</para></refsect2>
<refsect2 id="cut-assert-equal-file-raw" role="macro" condition="since:1.1.4">
<title>cut_assert_equal_file_raw()</title>
<indexterm zone="cut-assert-equal-file-raw" role="1.1.4"><primary>cut_assert_equal_file_raw</primary></indexterm>
<programlisting>#define             cut_assert_equal_file_raw(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter>の内容と<parameter>actual</parameter>内容が等しいときパスします。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>パス。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>パス。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.4から</para></refsect2>
<refsect2 id="cut-assert-not-equal-file-raw" role="macro" condition="since:1.1.4">
<title>cut_assert_not_equal_file_raw()</title>
<indexterm zone="cut-assert-not-equal-file-raw" role="1.1.4"><primary>cut_assert_not_equal_file_raw</primary></indexterm>
<programlisting>#define             cut_assert_not_equal_file_raw(expected, actual, ...)</programlisting>
<para><parameter>expected</parameter>の内容と<parameter>actual</parameter>内容が異なるときパスします。</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>パス。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>パス。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.1.4から</para></refsect2>
<refsect2 id="cut-error" role="function">
<title>cut_error ()</title>
<indexterm zone="cut-error"><primary>cut_error</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_error                           (<parameter>const <link linkend="char"><type>char</type></link> *format</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para>メッセージ付きでエラーを発生させます。</para><variablelist role="params">
<varlistentry><term><parameter>format</parameter> :</term>
<listitem><simpara>整形文字列。<link linkend="printf"><function>printf()</function></link>のドキュメントを見てください。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>整形文字列に挿入されるパラメータ。</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cut-error-errno" role="function" condition="since:1.0.2">
<title>cut_error_errno ()</title>
<indexterm zone="cut-error-errno" role="1.0.2"><primary>cut_error_errno</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_error_errno                     (<parameter>...</parameter>);</programlisting>
<para>例: <informalexample><programlisting>
void
setup (void)
{
    mkdir("tmp", 0700);
    cut_error_errno("Failed to make tmp directory");
      -&gt; Error when tmp directory isn't made successfully.
}
</programlisting></informalexample></para><variablelist role="params">
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>追加メッセージ（省略可能）。詳細は<link linkend="cut-message"><function>cut_message()</function></link>を見てください。</simpara></listitem></varlistentry>
</variablelist><para role="since">1.0.2から</para></refsect2>
<refsect2 id="cut-fail" role="function">
<title>cut_fail ()</title>
<indexterm zone="cut-fail"><primary>cut_fail</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_fail                            (<parameter>const <link linkend="char"><type>char</type></link> *format</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para>メッセージ付きでテストを失敗させます。</para><variablelist role="params">
<varlistentry><term><parameter>format</parameter> :</term>
<listitem><simpara>整形文字列。<link linkend="printf"><function>printf()</function></link>のドキュメントを見てください。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>整形文字列に挿入されるパラメータ。</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cut-pend" role="function">
<title>cut_pend ()</title>
<indexterm zone="cut-pend"><primary>cut_pend</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_pend                            (<parameter>const <link linkend="char"><type>char</type></link> *format</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para>メッセージ付きでこのテストが未解決であると印を付けます。テストはここで中断します。</para><variablelist role="params">
<varlistentry><term><parameter>format</parameter> :</term>
<listitem><simpara>整形文字列。<link linkend="printf"><function>printf()</function></link>のドキュメントを見てください。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>整形文字列に挿入されるパラメータ。</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cut-pending" role="function" condition="deprecated:0.4: Use cut_pend() instead.">
<title>cut_pending ()</title>
<indexterm zone="cut-pending" role="deprecated"><primary>cut_pending</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_pending                         (<parameter>const <link linkend="char"><type>char</type></link> *format</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<warning><para><literal>cut_pending</literal>はバージョン0.4から非推奨になりました。新しく書くコードでは使わないでください。代わりに<link linkend="cut-pend"><function>cut_pend()</function></link>を使ってください。</para></warning>
<para>メッセージ付きでこのテストが未解決であると印を付けます。テストはここで中断します。</para><variablelist role="params">
<varlistentry><term><parameter>format</parameter> :</term>
<listitem><simpara>整形文字列。<link linkend="printf"><function>printf()</function></link>のドキュメントを見てください。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>整形文字列に挿入されるパラメータ。</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cut-notify" role="function">
<title>cut_notify ()</title>
<indexterm zone="cut-notify"><primary>cut_notify</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_notify                          (<parameter>const <link linkend="char"><type>char</type></link> *format</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para>通知用のメッセージを残します。テストは続行します。</para><variablelist role="params">
<varlistentry><term><parameter>format</parameter> :</term>
<listitem><simpara>整形文字列。<link linkend="printf"><function>printf()</function></link>のドキュメントを見てください。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>整形文字列に挿入されるパラメータ。</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cut-omit" role="function" condition="since:0.8">
<title>cut_omit ()</title>
<indexterm zone="cut-omit" role="0.8"><primary>cut_omit</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_omit                            (<parameter>const <link linkend="char"><type>char</type></link> *format</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para>このテストを省略します。</para>
<para>例: <informalexample><programlisting>
if (version &lt; 2.0)
  cut_omit("Require &gt;= 2.0");
</programlisting></informalexample></para><variablelist role="params">
<varlistentry><term><parameter>format</parameter> :</term>
<listitem><simpara>整形文字列。<link linkend="printf"><function>printf()</function></link>のドキュメントを見てください。</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>整形文字列に挿入されるパラメータ。</simpara></listitem></varlistentry>
</variablelist><para role="since">0.8から</para></refsect2>
<refsect2 id="cut-return" role="function" condition="since:1.0.6">
<title>cut_return ()</title>
<indexterm zone="cut-return" role="1.0.6"><primary>cut_return</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cut_return                          (<parameter><type>void</type></parameter>);</programlisting>
<para>このテストを終了します。</para>
<para>例: <informalexample><programlisting>
static void
sub_xxx (void)
{
  some_assertions();
  if (no_need_more_test)
    cut_return();
  some_assertions();
}

void
test_xxx (void)
{
   some_assertions();
   cut_trace(sub_xxx());
   some_assertions();
}
</programlisting></informalexample></para><para role="since">1.0.6から</para></refsect2>

</refsect1>

</refentry>
