<TITLE>calloc</TITLE>
<body bgcolor="#ffffcc">
<hr>
<pre>



<h3>MALLOC(3)           Linux Programmer's Manual           MALLOC(3)
</h3>

<h3>NAME
</h3>       calloc,  malloc, free, realloc - Allocate and free dynamic
       memory

<h3>SYNOPSIS
</h3>       #include &lt;stdlib.h&gt;

       void *calloc(size_t nmemb, size_t size);
       void *malloc(size_t size);
       void free(void *ptr);
       void *realloc(void *ptr, size_t size);

<h3>DESCRIPTION
</h3>       calloc() allocates memory for an array of  nmemb  elements
       of  size bytes each and returns a pointer to the allocated
       memory.  The memory is set to zero.

       malloc() allocates size bytes and returns a pointer to the
       allocated memory.  The memory is not cleared.

       free()  frees  the  memory  space pointed to by ptr, which
       must have been returned by a previous  call  to  malloc(),
       calloc()  or  realloc().   If ptr is NULL, no operation is
       performed.

       realloc() changes the size of the memory block pointed  to
       by  ptr  to size bytes.  The contents will be unchanged to
       the minimum of the old an new sizes; newly allocated  mem-
       ory  will  be  uninitialized.  If ptr is NULL, the call is
       equivalent to malloc(size); if size is equal to zero,  the
       call  is  equivalent to free(ptr).  Unless ptr is NULL, it
       must have been returned by an earlier  call  to  malloc(),
       calloc() or realloc().

<h3>RETURN VALUES
</h3>       For calloc() and malloc(), the value returned is a pointer
       to the allocated memory, which is suitably aligned for any
       kind of variable, or NULL if the request fails.

       free() returns no value.

       realloc() returns a pointer to the newly allocated memory,
       which is suitably aligned for any kind of variable and may
       be  different from ptr, or NULL if the request fails or if
       size was equal to 0.   If  realloc()  fails  the  original
       block is left untouched - it is not freed or moved.

<h3>CONFORMS TO
</h3>       ANSI - C

</pre>
<hr>
<h3>SEE ALSO
</h3><p>
<a href=brk.htm>brk</a>, 
<pre>





<h3>GNU                       April 4, 1993                         1
</h3>

</pre>
<P>
<hr>
<p>
<center>
<table border=2 width=80%>
<tr align=center>
<td width=25%>
<a href=../cref.html>Top</a>
</td><td width=25%>
<a href=../master_index.html>Master Index</a>
</td><td width=25%>
<a href=../SYNTAX/keywords.html>Keywords</a>
</td><td width=25%>
<a href=../FUNCTIONS/funcref.htm>Functions</a>
</td>
</tr>
</table>
</center>
<p>
<hr>

This manual page was brought to you by <i>mjl_man V-2.0</i>
