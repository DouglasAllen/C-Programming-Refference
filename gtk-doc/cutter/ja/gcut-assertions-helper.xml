<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="cutter-gcut-assertions-helper">
<refmeta>
<refentrytitle role="top_of_page" id="cutter-gcut-assertions-helper.top_of_page">gcut-assertions-helper</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>Cutterライブラリ</refmiscinfo>
</refmeta>
<refnamediv>
<refname>gcut-assertions-helper</refname>
<refpurpose/>
</refnamediv>

<refsynopsisdiv id="cutter-gcut-assertions-helper.synopsis" role="synopsis">
<title role="synopsis.title">概要</title>

<synopsis><link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gcut-assert-equal-type-helper">gcut_assert_equal_type_helper</link>       (<parameter><link linkend="GType"><type>GType</type></link> expected</parameter>,
                                                         <parameter><link linkend="GType"><type>GType</type></link> actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gcut-assert-equal-value-helper">gcut_assert_equal_value_helper</link>      (<parameter><link linkend="GValue"><type>GValue</type></link> *expected</parameter>,
                                                         <parameter><link linkend="GValue"><type>GValue</type></link> *actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gcut-assert-equal-list-helper">gcut_assert_equal_list_helper</link>       (<parameter>const <link linkend="GList"><type>GList</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="GList"><type>GList</type></link> *actual</parameter>,
                                                         <parameter><link linkend="GEqualFunc"><type>GEqualFunc</type></link> equal_function</parameter>,
                                                         <parameter><link linkend="GCutInspectFunction"><type>GCutInspectFunction</type></link> inspect_function</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> inspect_user_data</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_equal_function</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gcut-assert-equal-list-int-helper">gcut_assert_equal_list_int_helper</link>   (<parameter>const <link linkend="GList"><type>GList</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="GList"><type>GList</type></link> *actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gcut-assert-equal-list-uint-helper">gcut_assert_equal_list_uint_helper</link>  (<parameter>const <link linkend="GList"><type>GList</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="GList"><type>GList</type></link> *actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gcut-assert-equal-list-string-helper">gcut_assert_equal_list_string_helper</link>
                                                        (<parameter>const <link linkend="GList"><type>GList</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="GList"><type>GList</type></link> *actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gcut-assert-equal-list-enum-helper">gcut_assert_equal_list_enum_helper</link>  (<parameter><link linkend="GType"><type>GType</type></link> type</parameter>,
                                                         <parameter>const <link linkend="GList"><type>GList</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="GList"><type>GList</type></link> *actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_type</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gcut-assert-equal-list-flags-helper">gcut_assert_equal_list_flags_helper</link> (<parameter><link linkend="GType"><type>GType</type></link> type</parameter>,
                                                         <parameter>const <link linkend="GList"><type>GList</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="GList"><type>GList</type></link> *actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_type</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gcut-assert-equal-list-object-helper">gcut_assert_equal_list_object_helper</link>
                                                        (<parameter>const <link linkend="GList"><type>GList</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="GList"><type>GList</type></link> *actual</parameter>,
                                                         <parameter><link linkend="GEqualFunc"><type>GEqualFunc</type></link> equal_function</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gcut-assert-equal-hash-table-helper">gcut_assert_equal_hash_table_helper</link> (<parameter><link linkend="GHashTable"><type>GHashTable</type></link> *expected</parameter>,
                                                         <parameter><link linkend="GHashTable"><type>GHashTable</type></link> *actual</parameter>,
                                                         <parameter><link linkend="GEqualFunc"><type>GEqualFunc</type></link> equal_function</parameter>,
                                                         <parameter><link linkend="GCutInspectFunction"><type>GCutInspectFunction</type></link> key_inspect_function</parameter>,
                                                         <parameter><link linkend="GCutInspectFunction"><type>GCutInspectFunction</type></link> value_inspect_function</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> inspect_user_data</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_equal_function</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gcut-assert-equal-hash-table-string-string-helper">gcut_assert_equal_hash_table_string_string_helper</link>
                                                        (<parameter><link linkend="GHashTable"><type>GHashTable</type></link> *expected</parameter>,
                                                         <parameter><link linkend="GHashTable"><type>GHashTable</type></link> *actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gcut-assert-error-helper">gcut_assert_error_helper</link>            (<parameter><link linkend="GError"><type>GError</type></link> *error</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_error</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gcut-assert-equal-error-helper">gcut_assert_equal_error_helper</link>      (<parameter>const <link linkend="GError"><type>GError</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="GError"><type>GError</type></link> *actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gcut-assert-remove-path-helper">gcut_assert_remove_path_helper</link>      (<parameter>const <link linkend="gchar"><type>gchar</type></link> *path</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gcut-assert-equal-time-val-helper">gcut_assert_equal_time_val_helper</link>   (<parameter><link linkend="GTimeVal"><type>GTimeVal</type></link> *expected</parameter>,
                                                         <parameter><link linkend="GTimeVal"><type>GTimeVal</type></link> *actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *actual_expected</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gcut-assert-equal-enum-helper">gcut_assert_equal_enum_helper</link>       (<parameter><link linkend="GType"><type>GType</type></link> enum_type</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> expected</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_enum_type</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gcut-assert-equal-flags-helper">gcut_assert_equal_flags_helper</link>      (<parameter><link linkend="GType"><type>GType</type></link> flags_type</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> expected</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_flags_type</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gcut-assert-equal-object-helper">gcut_assert_equal_object_helper</link>     (<parameter><link linkend="GObject"><type>GObject</type></link> *expected</parameter>,
                                                         <parameter><link linkend="GObject"><type>GObject</type></link> *actual</parameter>,
                                                         <parameter><link linkend="GEqualFunc"><type>GEqualFunc</type></link> equal_function</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_equal_function</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gcut-assert-equal-int64-helper">gcut_assert_equal_int64_helper</link>      (<parameter><link linkend="gint64"><type>gint64</type></link> expected</parameter>,
                                                         <parameter><link linkend="gint64"><type>gint64</type></link> actual</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *expression_actual</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gcut-assert-not-equal-int64-helper">gcut_assert_not_equal_int64_helper</link>  (<parameter><link linkend="gint64"><type>gint64</type></link> expected</parameter>,
                                                         <parameter><link linkend="gint64"><type>gint64</type></link> actual</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *expression_actual</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gcut-assert-equal-uint64-helper">gcut_assert_equal_uint64_helper</link>     (<parameter><link linkend="guint64"><type>guint64</type></link> expected</parameter>,
                                                         <parameter><link linkend="guint64"><type>guint64</type></link> actual</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *expression_actual</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gcut-assert-not-equal-uint64-helper">gcut_assert_not_equal_uint64_helper</link> (<parameter><link linkend="guint64"><type>guint64</type></link> expected</parameter>,
                                                         <parameter><link linkend="guint64"><type>guint64</type></link> actual</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *expression_actual</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gcut-assert-equal-pid-helper">gcut_assert_equal_pid_helper</link>        (<parameter><link linkend="GPid"><type>GPid</type></link> expected</parameter>,
                                                         <parameter><link linkend="GPid"><type>GPid</type></link> actual</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *expression_actual</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gcut-assert-not-equal-pid-helper">gcut_assert_not_equal_pid_helper</link>    (<parameter><link linkend="GPid"><type>GPid</type></link> expected</parameter>,
                                                         <parameter><link linkend="GPid"><type>GPid</type></link> actual</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *expression_actual</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gcut-assert-equal-string-helper">gcut_assert_equal_string_helper</link>     (<parameter>const <link linkend="GString"><type>GString</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="GString"><type>GString</type></link> *actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>);
</synopsis>
</refsynopsisdiv>

<refsect1 id="cutter-gcut-assertions-helper.description" role="desc">
<title role="desc.title">説明</title>
<para>
</para>
</refsect1>
<refsect1 id="cutter-gcut-assertions-helper.details" role="details">
<title role="details.title">詳細</title>
<refsect2 id="gcut-assert-equal-type-helper" role="function">
<title>gcut_assert_equal_type_helper ()</title>
<indexterm zone="gcut-assert-equal-type-helper"><primary>gcut_assert_equal_type_helper</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gcut_assert_equal_type_helper       (<parameter><link linkend="GType"><type>GType</type></link> expected</parameter>,
                                                         <parameter><link linkend="GType"><type>GType</type></link> actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gcut-assert-equal-value-helper" role="function">
<title>gcut_assert_equal_value_helper ()</title>
<indexterm zone="gcut-assert-equal-value-helper"><primary>gcut_assert_equal_value_helper</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gcut_assert_equal_value_helper      (<parameter><link linkend="GValue"><type>GValue</type></link> *expected</parameter>,
                                                         <parameter><link linkend="GValue"><type>GValue</type></link> *actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gcut-assert-equal-list-helper" role="function">
<title>gcut_assert_equal_list_helper ()</title>
<indexterm zone="gcut-assert-equal-list-helper"><primary>gcut_assert_equal_list_helper</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gcut_assert_equal_list_helper       (<parameter>const <link linkend="GList"><type>GList</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="GList"><type>GList</type></link> *actual</parameter>,
                                                         <parameter><link linkend="GEqualFunc"><type>GEqualFunc</type></link> equal_function</parameter>,
                                                         <parameter><link linkend="GCutInspectFunction"><type>GCutInspectFunction</type></link> inspect_function</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> inspect_user_data</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_equal_function</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>equal_function</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inspect_function</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inspect_user_data</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_equal_function</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gcut-assert-equal-list-int-helper" role="function">
<title>gcut_assert_equal_list_int_helper ()</title>
<indexterm zone="gcut-assert-equal-list-int-helper"><primary>gcut_assert_equal_list_int_helper</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gcut_assert_equal_list_int_helper   (<parameter>const <link linkend="GList"><type>GList</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="GList"><type>GList</type></link> *actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gcut-assert-equal-list-uint-helper" role="function">
<title>gcut_assert_equal_list_uint_helper ()</title>
<indexterm zone="gcut-assert-equal-list-uint-helper"><primary>gcut_assert_equal_list_uint_helper</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gcut_assert_equal_list_uint_helper  (<parameter>const <link linkend="GList"><type>GList</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="GList"><type>GList</type></link> *actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gcut-assert-equal-list-string-helper" role="function">
<title>gcut_assert_equal_list_string_helper ()</title>
<indexterm zone="gcut-assert-equal-list-string-helper"><primary>gcut_assert_equal_list_string_helper</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gcut_assert_equal_list_string_helper
                                                        (<parameter>const <link linkend="GList"><type>GList</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="GList"><type>GList</type></link> *actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gcut-assert-equal-list-enum-helper" role="function">
<title>gcut_assert_equal_list_enum_helper ()</title>
<indexterm zone="gcut-assert-equal-list-enum-helper"><primary>gcut_assert_equal_list_enum_helper</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gcut_assert_equal_list_enum_helper  (<parameter><link linkend="GType"><type>GType</type></link> type</parameter>,
                                                         <parameter>const <link linkend="GList"><type>GList</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="GList"><type>GList</type></link> *actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_type</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_type</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gcut-assert-equal-list-flags-helper" role="function">
<title>gcut_assert_equal_list_flags_helper ()</title>
<indexterm zone="gcut-assert-equal-list-flags-helper"><primary>gcut_assert_equal_list_flags_helper</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gcut_assert_equal_list_flags_helper (<parameter><link linkend="GType"><type>GType</type></link> type</parameter>,
                                                         <parameter>const <link linkend="GList"><type>GList</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="GList"><type>GList</type></link> *actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_type</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_type</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gcut-assert-equal-list-object-helper" role="function">
<title>gcut_assert_equal_list_object_helper ()</title>
<indexterm zone="gcut-assert-equal-list-object-helper"><primary>gcut_assert_equal_list_object_helper</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gcut_assert_equal_list_object_helper
                                                        (<parameter>const <link linkend="GList"><type>GList</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="GList"><type>GList</type></link> *actual</parameter>,
                                                         <parameter><link linkend="GEqualFunc"><type>GEqualFunc</type></link> equal_function</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>equal_function</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gcut-assert-equal-hash-table-helper" role="function">
<title>gcut_assert_equal_hash_table_helper ()</title>
<indexterm zone="gcut-assert-equal-hash-table-helper"><primary>gcut_assert_equal_hash_table_helper</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gcut_assert_equal_hash_table_helper (<parameter><link linkend="GHashTable"><type>GHashTable</type></link> *expected</parameter>,
                                                         <parameter><link linkend="GHashTable"><type>GHashTable</type></link> *actual</parameter>,
                                                         <parameter><link linkend="GEqualFunc"><type>GEqualFunc</type></link> equal_function</parameter>,
                                                         <parameter><link linkend="GCutInspectFunction"><type>GCutInspectFunction</type></link> key_inspect_function</parameter>,
                                                         <parameter><link linkend="GCutInspectFunction"><type>GCutInspectFunction</type></link> value_inspect_function</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> inspect_user_data</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_equal_function</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>equal_function</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key_inspect_function</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value_inspect_function</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inspect_user_data</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_equal_function</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gcut-assert-equal-hash-table-string-string-helper" role="function">
<title>gcut_assert_equal_hash_table_string_string_helper ()</title>
<indexterm zone="gcut-assert-equal-hash-table-string-string-helper"><primary>gcut_assert_equal_hash_table_string_string_helper</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gcut_assert_equal_hash_table_string_string_helper
                                                        (<parameter><link linkend="GHashTable"><type>GHashTable</type></link> *expected</parameter>,
                                                         <parameter><link linkend="GHashTable"><type>GHashTable</type></link> *actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gcut-assert-error-helper" role="function">
<title>gcut_assert_error_helper ()</title>
<indexterm zone="gcut-assert-error-helper"><primary>gcut_assert_error_helper</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gcut_assert_error_helper            (<parameter><link linkend="GError"><type>GError</type></link> *error</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_error</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>error</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_error</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gcut-assert-equal-error-helper" role="function">
<title>gcut_assert_equal_error_helper ()</title>
<indexterm zone="gcut-assert-equal-error-helper"><primary>gcut_assert_equal_error_helper</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gcut_assert_equal_error_helper      (<parameter>const <link linkend="GError"><type>GError</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="GError"><type>GError</type></link> *actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gcut-assert-remove-path-helper" role="function">
<title>gcut_assert_remove_path_helper ()</title>
<indexterm zone="gcut-assert-remove-path-helper"><primary>gcut_assert_remove_path_helper</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gcut_assert_remove_path_helper      (<parameter>const <link linkend="gchar"><type>gchar</type></link> *path</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>path</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gcut-assert-equal-time-val-helper" role="function">
<title>gcut_assert_equal_time_val_helper ()</title>
<indexterm zone="gcut-assert-equal-time-val-helper"><primary>gcut_assert_equal_time_val_helper</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gcut_assert_equal_time_val_helper   (<parameter><link linkend="GTimeVal"><type>GTimeVal</type></link> *expected</parameter>,
                                                         <parameter><link linkend="GTimeVal"><type>GTimeVal</type></link> *actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *actual_expected</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual_expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gcut-assert-equal-enum-helper" role="function">
<title>gcut_assert_equal_enum_helper ()</title>
<indexterm zone="gcut-assert-equal-enum-helper"><primary>gcut_assert_equal_enum_helper</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gcut_assert_equal_enum_helper       (<parameter><link linkend="GType"><type>GType</type></link> enum_type</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> expected</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_enum_type</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>enum_type</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_enum_type</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gcut-assert-equal-flags-helper" role="function">
<title>gcut_assert_equal_flags_helper ()</title>
<indexterm zone="gcut-assert-equal-flags-helper"><primary>gcut_assert_equal_flags_helper</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gcut_assert_equal_flags_helper      (<parameter><link linkend="GType"><type>GType</type></link> flags_type</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> expected</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_flags_type</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>flags_type</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_flags_type</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gcut-assert-equal-object-helper" role="function">
<title>gcut_assert_equal_object_helper ()</title>
<indexterm zone="gcut-assert-equal-object-helper"><primary>gcut_assert_equal_object_helper</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gcut_assert_equal_object_helper     (<parameter><link linkend="GObject"><type>GObject</type></link> *expected</parameter>,
                                                         <parameter><link linkend="GObject"><type>GObject</type></link> *actual</parameter>,
                                                         <parameter><link linkend="GEqualFunc"><type>GEqualFunc</type></link> equal_function</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_equal_function</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>equal_function</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_equal_function</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gcut-assert-equal-int64-helper" role="function">
<title>gcut_assert_equal_int64_helper ()</title>
<indexterm zone="gcut-assert-equal-int64-helper"><primary>gcut_assert_equal_int64_helper</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gcut_assert_equal_int64_helper      (<parameter><link linkend="gint64"><type>gint64</type></link> expected</parameter>,
                                                         <parameter><link linkend="gint64"><type>gint64</type></link> actual</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *expression_actual</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gcut-assert-not-equal-int64-helper" role="function">
<title>gcut_assert_not_equal_int64_helper ()</title>
<indexterm zone="gcut-assert-not-equal-int64-helper"><primary>gcut_assert_not_equal_int64_helper</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gcut_assert_not_equal_int64_helper  (<parameter><link linkend="gint64"><type>gint64</type></link> expected</parameter>,
                                                         <parameter><link linkend="gint64"><type>gint64</type></link> actual</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *expression_actual</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gcut-assert-equal-uint64-helper" role="function">
<title>gcut_assert_equal_uint64_helper ()</title>
<indexterm zone="gcut-assert-equal-uint64-helper"><primary>gcut_assert_equal_uint64_helper</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gcut_assert_equal_uint64_helper     (<parameter><link linkend="guint64"><type>guint64</type></link> expected</parameter>,
                                                         <parameter><link linkend="guint64"><type>guint64</type></link> actual</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *expression_actual</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gcut-assert-not-equal-uint64-helper" role="function">
<title>gcut_assert_not_equal_uint64_helper ()</title>
<indexterm zone="gcut-assert-not-equal-uint64-helper"><primary>gcut_assert_not_equal_uint64_helper</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gcut_assert_not_equal_uint64_helper (<parameter><link linkend="guint64"><type>guint64</type></link> expected</parameter>,
                                                         <parameter><link linkend="guint64"><type>guint64</type></link> actual</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *expression_actual</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gcut-assert-equal-pid-helper" role="function">
<title>gcut_assert_equal_pid_helper ()</title>
<indexterm zone="gcut-assert-equal-pid-helper"><primary>gcut_assert_equal_pid_helper</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gcut_assert_equal_pid_helper        (<parameter><link linkend="GPid"><type>GPid</type></link> expected</parameter>,
                                                         <parameter><link linkend="GPid"><type>GPid</type></link> actual</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *expression_actual</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gcut-assert-not-equal-pid-helper" role="function">
<title>gcut_assert_not_equal_pid_helper ()</title>
<indexterm zone="gcut-assert-not-equal-pid-helper"><primary>gcut_assert_not_equal_pid_helper</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gcut_assert_not_equal_pid_helper    (<parameter><link linkend="GPid"><type>GPid</type></link> expected</parameter>,
                                                         <parameter><link linkend="GPid"><type>GPid</type></link> actual</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *expression_actual</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gcut-assert-equal-string-helper" role="function">
<title>gcut_assert_equal_string_helper ()</title>
<indexterm zone="gcut-assert-equal-string-helper"><primary>gcut_assert_equal_string_helper</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gcut_assert_equal_string_helper     (<parameter>const <link linkend="GString"><type>GString</type></link> *expected</parameter>,
                                                         <parameter>const <link linkend="GString"><type>GString</type></link> *actual</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_expected</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *expression_actual</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_expected</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expression_actual</parameter> :</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

</refentry>
